/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'ACKMsg'
 * message type.
 */

public class ACKMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 5;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 8;

    /** Create a new ACKMsg of size 5. */
    public ACKMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new ACKMsg of the given data_length. */
    public ACKMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ACKMsg with the given data_length
     * and base offset.
     */
    public ACKMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ACKMsg using the given byte array
     * as backing store.
     */
    public ACKMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ACKMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public ACKMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ACKMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public ACKMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ACKMsg embedded in the given message
     * at the given base offset.
     */
    public ACKMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ACKMsg embedded in the given message
     * at the given base offset and length.
     */
    public ACKMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <ACKMsg> \n";
      try {
        s += "  [typeCode=0x"+Long.toHexString(get_typeCode())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fromId=0x"+Long.toHexString(get_fromId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [toId=0x"+Long.toHexString(get_toId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seqNo=0x"+Long.toHexString(get_seqNo())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: typeCode
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'typeCode' is signed (false).
     */
    public static boolean isSigned_typeCode() {
        return false;
    }

    /**
     * Return whether the field 'typeCode' is an array (false).
     */
    public static boolean isArray_typeCode() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'typeCode'
     */
    public static int offset_typeCode() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'typeCode'
     */
    public static int offsetBits_typeCode() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'typeCode'
     */
    public short get_typeCode() {
        return (short)getUIntBEElement(offsetBits_typeCode(), 8);
    }

    /**
     * Set the value of the field 'typeCode'
     */
    public void set_typeCode(short value) {
        setUIntBEElement(offsetBits_typeCode(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'typeCode'
     */
    public static int size_typeCode() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'typeCode'
     */
    public static int sizeBits_typeCode() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fromId
    //   Field type: short, unsigned
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fromId' is signed (false).
     */
    public static boolean isSigned_fromId() {
        return false;
    }

    /**
     * Return whether the field 'fromId' is an array (false).
     */
    public static boolean isArray_fromId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fromId'
     */
    public static int offset_fromId() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fromId'
     */
    public static int offsetBits_fromId() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'fromId'
     */
    public short get_fromId() {
        return (short)getUIntBEElement(offsetBits_fromId(), 8);
    }

    /**
     * Set the value of the field 'fromId'
     */
    public void set_fromId(short value) {
        setUIntBEElement(offsetBits_fromId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'fromId'
     */
    public static int size_fromId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fromId'
     */
    public static int sizeBits_fromId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: toId
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'toId' is signed (false).
     */
    public static boolean isSigned_toId() {
        return false;
    }

    /**
     * Return whether the field 'toId' is an array (false).
     */
    public static boolean isArray_toId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'toId'
     */
    public static int offset_toId() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'toId'
     */
    public static int offsetBits_toId() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'toId'
     */
    public short get_toId() {
        return (short)getUIntBEElement(offsetBits_toId(), 8);
    }

    /**
     * Set the value of the field 'toId'
     */
    public void set_toId(short value) {
        setUIntBEElement(offsetBits_toId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'toId'
     */
    public static int size_toId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'toId'
     */
    public static int sizeBits_toId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqNo
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqNo' is signed (false).
     */
    public static boolean isSigned_seqNo() {
        return false;
    }

    /**
     * Return whether the field 'seqNo' is an array (false).
     */
    public static boolean isArray_seqNo() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqNo'
     */
    public static int offset_seqNo() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqNo'
     */
    public static int offsetBits_seqNo() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'seqNo'
     */
    public int get_seqNo() {
        return (int)getUIntBEElement(offsetBits_seqNo(), 16);
    }

    /**
     * Set the value of the field 'seqNo'
     */
    public void set_seqNo(int value) {
        setUIntBEElement(offsetBits_seqNo(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqNo'
     */
    public static int size_seqNo() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqNo'
     */
    public static int sizeBits_seqNo() {
        return 16;
    }

}
