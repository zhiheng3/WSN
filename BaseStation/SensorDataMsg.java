/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SensorDataMsg'
 * message type.
 */
import java.io.*;

public class SensorDataMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 15;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;


    public static boolean flagNode1 = false;
    public static boolean flagNode2 = false;
    public static int dataNumberNode1 = 0;
    public static int dataNumberNode2 = 0;
    public static int seqFirstNode1 = 0;
    public static int seqLastNode1 = 0;
    public static int seqFirstNode2 = 0;
    public static int seqLastNode2 = 0;
    public static int count = 0;
    public static String fileName = "result.txt";


    /** Create a new SensorDataMsg of size 15. */
    public SensorDataMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SensorDataMsg of the given data_length. */
    public SensorDataMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorDataMsg with the given data_length
     * and base offset.
     */
    public SensorDataMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorDataMsg using the given byte array
     * as backing store.
     */
    public SensorDataMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorDataMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public SensorDataMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorDataMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SensorDataMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorDataMsg embedded in the given message
     * at the given base offset.
     */
    public SensorDataMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorDataMsg embedded in the given message
     * at the given base offset and length.
     */
    public SensorDataMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SensorDataMsg> \n";
      if(get_toId() == 1){
        return (s+"Transform Data\n");
      }

      if(get_fromId() == 1 && !flagNode1){
        reset(1);
        flagNode1 = true;
      }
      else if(get_fromId() == 2 && !flagNode2){
        reset(2);
        flagNode2 = true;
      }

      FileWriter filewriter = null;
      try{

        if(get_fromId() == 1){
            if(seqLastNode1 > get_seqNo()){
                count++;
                fileName = "result" + count +".txt";
                filewriter = new FileWriter(fileName,true);
            }
            else{
                filewriter = new FileWriter(fileName,true);
            }
        }
         else{
            if(seqLastNode2 > get_seqNo()){
                fileName = "result" + count +".txt";
                filewriter = new FileWriter(fileName,true);
            }
            else{
                filewriter = new FileWriter(fileName,true);
            }
         }
     }catch(IOException e){
        System.out.println("Error occurs in open file!\n");
     }
     
      String context = "";
      try {
        s += "  [typeCode=0x"+Long.toHexString(get_typeCode())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fromId=0x"+Long.toHexString(get_fromId())+"]\n";
        context += get_fromId() + " ";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [toId=0x"+Long.toHexString(get_toId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seqNo=0x"+Long.toHexString(get_seqNo())+"]\n";
        context += get_seqNo() + " ";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [temperature="+convertTemp(get_temperature())+"]\n";
        context += convertTemp(get_temperature()) + " ";
        //s += "  [temperature=0x"+Long.toHexString(get_temperature())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [humidity="+convertHumi(get_humidity())+"]\n";
        context += convertHumi(get_humidity()) + " ";
        //s += "  [humidity=0x"+Long.toHexString(get_humidity())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [illuminance="+convertIllu(get_illuminance())+"]\n";
        context += convertIllu(get_illuminance()) + " ";
        //s += "  [illuminance=0x"+Long.toHexString(get_illuminance())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [timeStamp="+convertTime(get_timeStamp())+"]\n";
        context += convertTime(get_timeStamp()) + "\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [lostRate="+showLostRate(get_fromId())+"%]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }

      try{
        filewriter.write(context,0,context.length());
        filewriter.flush();
      }catch(IOException e){
        System.out.println("Error occurs in write file!\n");
      }

      updateLastSeq(get_fromId());

      return s;    }


    public String showLostRate(int nodeId){
        if(get_toId() == 1){
            return("none");
        }
        else if(nodeId == 1){
            if(flagNode1 && (seqLastNode1 > get_seqNo())){
                reset(1);
            }

            dataNumberNode1++;
            return (calaLostRate(get_seqNo(),seqFirstNode1,dataNumberNode1)+"");
        }
        else if(nodeId == 2){
            if(flagNode2 && (seqFirstNode2 > get_seqNo())){
                reset(2);
            }

            dataNumberNode2++;
            return (calaLostRate(get_seqNo(),seqFirstNode2,dataNumberNode2)+"");
        }
        else{
            return("error!");
        }

    }

    public void updateLastSeq(int nodeId){
        if(nodeId == 1){
            seqLastNode1 = get_seqNo();
        }
        else if(nodeId == 2){
           seqLastNode2 = get_seqNo();
        }
    }

    public void reset(int nodeId){
        if(nodeId == 1){
            seqFirstNode1 = get_seqNo();
            seqLastNode1 = get_seqNo();
            dataNumberNode1 = 0;
        }
        else if(nodeId == 2){
            seqFirstNode2 = get_seqNo();
            seqLastNode2 = get_seqNo();
            dataNumberNode2 = 0;
        }
    }

    public double calaLostRate(int seqlast,int seqfirst,int datanumber){
        
        double rate = (1 - (double)datanumber / ((double)seqlast - (double)seqfirst + 1)) * 100;
        return(rate);
    }

    public double convertTemp(int temp){
        double temperature = -39.6 + 0.01 * (temp & 0x3fff);
        return (temperature);
    }

    public double convertHumi(int humi){
        int tmp = humi & 0xfff;
        double humidity = -2.0468 + 0.0367 * tmp - 1.5955 * Math.pow(10,-6) * tmp * tmp;
        return(humidity);
    }

    public double convertIllu(int illu){
        double illuminance = 0.085 * illu;
        return(illuminance);
    }


    public long convertTime(long time){
        long time_real = System.currentTimeMillis() / 1000000000 * 1000000000 + time;
        return(time_real);
    }
    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: typeCode
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'typeCode' is signed (false).
     */
    public static boolean isSigned_typeCode() {
        return false;
    }

    /**
     * Return whether the field 'typeCode' is an array (false).
     */
    public static boolean isArray_typeCode() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'typeCode'
     */
    public static int offset_typeCode() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'typeCode'
     */
    public static int offsetBits_typeCode() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'typeCode'
     */
    public short get_typeCode() {
        return (short)getUIntBEElement(offsetBits_typeCode(), 8);
    }

    /**
     * Set the value of the field 'typeCode'
     */
    public void set_typeCode(short value) {
        setUIntBEElement(offsetBits_typeCode(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'typeCode'
     */
    public static int size_typeCode() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'typeCode'
     */
    public static int sizeBits_typeCode() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fromId
    //   Field type: short, unsigned
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fromId' is signed (false).
     */
    public static boolean isSigned_fromId() {
        return false;
    }

    /**
     * Return whether the field 'fromId' is an array (false).
     */
    public static boolean isArray_fromId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fromId'
     */
    public static int offset_fromId() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fromId'
     */
    public static int offsetBits_fromId() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'fromId'
     */
    public short get_fromId() {
        return (short)getUIntBEElement(offsetBits_fromId(), 8);
    }

    /**
     * Set the value of the field 'fromId'
     */
    public void set_fromId(short value) {
        setUIntBEElement(offsetBits_fromId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'fromId'
     */
    public static int size_fromId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fromId'
     */
    public static int sizeBits_fromId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: toId
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'toId' is signed (false).
     */
    public static boolean isSigned_toId() {
        return false;
    }

    /**
     * Return whether the field 'toId' is an array (false).
     */
    public static boolean isArray_toId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'toId'
     */
    public static int offset_toId() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'toId'
     */
    public static int offsetBits_toId() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'toId'
     */
    public short get_toId() {
        return (short)getUIntBEElement(offsetBits_toId(), 8);
    }

    /**
     * Set the value of the field 'toId'
     */
    public void set_toId(short value) {
        setUIntBEElement(offsetBits_toId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'toId'
     */
    public static int size_toId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'toId'
     */
    public static int sizeBits_toId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqNo
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqNo' is signed (false).
     */
    public static boolean isSigned_seqNo() {
        return false;
    }

    /**
     * Return whether the field 'seqNo' is an array (false).
     */
    public static boolean isArray_seqNo() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqNo'
     */
    public static int offset_seqNo() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqNo'
     */
    public static int offsetBits_seqNo() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'seqNo'
     */
    public int get_seqNo() {
        return (int)getUIntBEElement(offsetBits_seqNo(), 16);
    }

    /**
     * Set the value of the field 'seqNo'
     */
    public void set_seqNo(int value) {
        setUIntBEElement(offsetBits_seqNo(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqNo'
     */
    public static int size_seqNo() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqNo'
     */
    public static int sizeBits_seqNo() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: temperature
    //   Field type: int, unsigned
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'temperature' is signed (false).
     */
    public static boolean isSigned_temperature() {
        return false;
    }

    /**
     * Return whether the field 'temperature' is an array (false).
     */
    public static boolean isArray_temperature() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'temperature'
     */
    public static int offset_temperature() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'temperature'
     */
    public static int offsetBits_temperature() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'temperature'
     */
    public int get_temperature() {
        return (int)getUIntBEElement(offsetBits_temperature(), 16);
    }

    /**
     * Set the value of the field 'temperature'
     */
    public void set_temperature(int value) {
        setUIntBEElement(offsetBits_temperature(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'temperature'
     */
    public static int size_temperature() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'temperature'
     */
    public static int sizeBits_temperature() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: humidity
    //   Field type: int, unsigned
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'humidity' is signed (false).
     */
    public static boolean isSigned_humidity() {
        return false;
    }

    /**
     * Return whether the field 'humidity' is an array (false).
     */
    public static boolean isArray_humidity() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'humidity'
     */
    public static int offset_humidity() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'humidity'
     */
    public static int offsetBits_humidity() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'humidity'
     */
    public int get_humidity() {
        return (int)getUIntBEElement(offsetBits_humidity(), 16);
    }

    /**
     * Set the value of the field 'humidity'
     */
    public void set_humidity(int value) {
        setUIntBEElement(offsetBits_humidity(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'humidity'
     */
    public static int size_humidity() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'humidity'
     */
    public static int sizeBits_humidity() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: illuminance
    //   Field type: int, unsigned
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'illuminance' is signed (false).
     */
    public static boolean isSigned_illuminance() {
        return false;
    }

    /**
     * Return whether the field 'illuminance' is an array (false).
     */
    public static boolean isArray_illuminance() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'illuminance'
     */
    public static int offset_illuminance() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'illuminance'
     */
    public static int offsetBits_illuminance() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'illuminance'
     */
    public int get_illuminance() {
        return (int)getUIntBEElement(offsetBits_illuminance(), 16);
    }

    /**
     * Set the value of the field 'illuminance'
     */
    public void set_illuminance(int value) {
        setUIntBEElement(offsetBits_illuminance(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'illuminance'
     */
    public static int size_illuminance() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'illuminance'
     */
    public static int sizeBits_illuminance() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: timeStamp
    //   Field type: long, unsigned
    //   Offset (bits): 88
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'timeStamp' is signed (false).
     */
    public static boolean isSigned_timeStamp() {
        return false;
    }

    /**
     * Return whether the field 'timeStamp' is an array (false).
     */
    public static boolean isArray_timeStamp() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'timeStamp'
     */
    public static int offset_timeStamp() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'timeStamp'
     */
    public static int offsetBits_timeStamp() {
        return 88;
    }

    /**
     * Return the value (as a long) of the field 'timeStamp'
     */
    public long get_timeStamp() {
        return (long)getUIntBEElement(offsetBits_timeStamp(), 32);
    }

    /**
     * Set the value of the field 'timeStamp'
     */
    public void set_timeStamp(long value) {
        setUIntBEElement(offsetBits_timeStamp(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'timeStamp'
     */
    public static int size_timeStamp() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'timeStamp'
     */
    public static int sizeBits_timeStamp() {
        return 32;
    }

}
